// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store{
  id String @id  @default(uuid()) @map("_id") 
  name String
  userId String 
  createdAt  DateTime @default(now())
  updatedAt DateTime @default(now()) 
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
 }
model Billboard {
  id String @id @default(uuid()) @map("_id")
  storeId String  
  poster String
  label String
  createdAt  DateTime @default(now())
  updatedAt DateTime @default(now())

  categories Category[] @relation("BillboardToCategory")
  store Store @relation("StoreToBillboard",fields: [storeId],references: [id],onDelete:Cascade)
  @@index([storeId]) 
 }
model Category{
   id String @id @default(uuid()) @map("_id")
   storeId String  
   billboardId String
   name String
   createdAt  DateTime @default(now())
   updatedAt DateTime @default(now())
   store Store @relation("StoreToCategory",fields: [storeId],references: [id],onDelete:Cascade)
   billboard Billboard @relation("BillboardToCategory",fields: [billboardId],references: [id],onDelete:Cascade)
   products Product[] @relation("CategoryToProduct")
   @@index([storeId])
   @@index([billboardId]) 
 } 
model Size{
  id String @id @default(uuid()) @map("_id")
  storeId String
  store Store @relation("StoreToSize",fields: [storeId],references: [id],onDelete:Cascade)
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@index([storeId])
 }
model Color{
  id String @id @default(uuid()) @map("_id")
  storeId String
  store Store @relation("StoreToColor",fields: [storeId],references: [id],onDelete:Cascade)
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@index([storeId])
 } 
model Product{
  id String @id @default(uuid()) @map("_id")
  storeId String 
  store Store @relation("StoreToProduct",fields: [storeId],references: [id],onDelete:Cascade)
  categoryId String
  category Category @relation("CategoryToProduct",fields : [categoryId],references : [id],onDelete:Cascade)
  sizeId String
  size Size @relation(fields: [sizeId],references: [id], onDelete:Cascade)
  colorId String
  color Color @relation(fields: [colorId],references: [id], onDelete:Cascade)
  images Image[]
  orderItems OrderItem[] @relation("ProductToOrderItem")
  name        String
  price       Float 
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  @@index([storeId, categoryId, sizeId, colorId])
  }
model Image{
  id String @id @default(uuid()) @map("_id")
  productId String  
  product Product @relation(fields: [productId] ,references: [id],onDelete:Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([productId]) 
  }
model Order{
  id String @id @default(uuid()) @map("_id")
  storeId String
  store Store @relation("StoreToOrder",fields: [storeId],references: [id],onDelete:Cascade)
  orderItems OrderItem[] @relation("OrderToOrderItem")
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  status String @default("PENDING")

  @@index([storeId])
 }


model OrderItem{
  id String @id @default(uuid()) @map("_id")
  orderId String
  order Order @relation("OrderToOrderItem",fields: [orderId],references: [id],onDelete:Cascade)
  productId String 
  product Product @relation("ProductToOrderItem",fields: [productId], references:[id],onDelete:Cascade)
  
  @@index([orderId,productId])
  }